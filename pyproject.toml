[build-system]
requires = ["setuptools>=45", "wheel", "setuptools_scm[toml]>=6.2"]
build-backend = "setuptools.build_meta"

[project]
name = "mysql-workbench-python"
dynamic = ["version"]
description = "A modern Python implementation of MySQL Workbench"
readme = "README.md"
license = {file = "LICENSE"}
authors = [
    {name = "MySQL Workbench Python Team", email = "mysql-workbench-python@example.com"},
]
maintainers = [
    {name = "MySQL Workbench Python Team", email = "mysql-workbench-python@example.com"},
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: System Administrators",
    "License :: OSI Approved :: GNU General Public License v2 (GPLv2)",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Database",
    "Topic :: Database :: Front-Ends",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
keywords = ["mysql", "database", "workbench", "sql", "gui", "admin"]
requires-python = ">=3.9"
dependencies = [
    "PyQt6>=6.6.0",
    "QScintilla>=2.14.0",
    "SQLAlchemy>=2.0.0",
    "PyMySQL>=1.0.0",
    "cryptography>=40.0.0",
    "Pygments>=2.15.0",
    "pydantic>=2.0.0",
    "pydantic-settings>=2.0.0",
    "aiofiles>=23.0.0",
    "python-dateutil>=2.8.0",
    "paramiko>=3.0.0",
    "PyYAML>=6.0.0",
    "rich>=13.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-qt>=4.0.0",
    "pytest-asyncio>=0.20.0",
    "black>=23.0.0",
    "flake8>=6.0.0",
    "mypy>=1.0.0",
    "isort>=5.0.0",
]
test = [
    "pytest>=7.0.0",
    "pytest-qt>=4.0.0",
    "pytest-asyncio>=0.20.0",
    "pytest-cov>=4.0.0",
]

[project.urls]
Homepage = "https://github.com/mysql/mysql-workbench-python"
Documentation = "https://mysql-workbench-python.readthedocs.io/"
Repository = "https://github.com/mysql/mysql-workbench-python.git"
Issues = "https://github.com/mysql/mysql-workbench-python/issues"
Changelog = "https://github.com/mysql/mysql-workbench-python/blob/main/CHANGELOG.md"

[project.scripts]
mysql-workbench-python = "workbench.main:main"

[project.gui-scripts]
mysql-workbench-python-gui = "workbench.main:main"

[tool.setuptools.packages.find]
where = ["workbench"]

[tool.setuptools.package-data]
workbench = [
    "images/*",
    "icons/*",
    "themes/*",
    "templates/*",
]

[tool.setuptools_scm]
write_to = "workbench/_version.py"

[tool.black]
line-length = 88
target-version = ["py39", "py310", "py311", "py312"]
include = '\.pyi?$'
extend-exclude = '''
/(
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
  | migrations
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["workbench"]

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "PyQt6.*",
    "pymysql.*",
    "paramiko.*",
    "pygments.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "gui: marks tests as GUI tests",
]

[tool.coverage.run]
source = ["workbench"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__init__.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]